var documenterSearchIndex = {"docs":
[{"location":"api/catalyst_api/#Catalyst.jl-API","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"CurrentModule = Catalyst","category":"page"},{"location":"api/catalyst_api/#Reaction-Network-Generation-and-Representation","page":"Catalyst.jl API","title":"Reaction Network Generation and Representation","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"Catalyst provides the @reaction_network macro for generating a complete network, stored as a ModelingToolkit.ReactionSystem, which in turn is composed of ModelingToolkit.Reactions. ReactionSystems can be converted to other ModelingToolkit.AbstractSystems, including a ModelingToolkit.ODESystem, ModelingToolkit.SDESystem or ModelingToolkit.JumpSystem. ","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"An empty network can be generated using @reaction_network with no arguments or the make_empty_network function. These can then be extended programmatically using addspecies!, addparam!, and addreaction!. ","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"It is important to note for @reaction_network that species which are used within the macro as part of a rate expression, but not as a substrate or product of some reaction, may lead to undefined behavior. i.e. avoid","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"rn = @reaction_network begin\n    k*X, Y --> W\nend k","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"as here X is never defined as either a species or parameter. ","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"@reaction_network\nmake_empty_network\nModelingToolkit.Reaction\nModelingToolkit.ReactionSystem","category":"page"},{"location":"api/catalyst_api/#Catalyst.@reaction_network","page":"Catalyst.jl API","title":"Catalyst.@reaction_network","text":"@reaction_network\n\nGenerates a ReactionSystem that encodes a chemical reaction network.\n\nSee the Catalyst.jl for Reaction Models documentation for details on parameters to the macro.\n\n\n\n\n\n","category":"macro"},{"location":"api/catalyst_api/#Catalyst.make_empty_network","page":"Catalyst.jl API","title":"Catalyst.make_empty_network","text":"make_empty_network(; iv=Variable(:t))\n\nConstruct an empty ReactionSystem. iv is the independent variable, usually time.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#ModelingToolkit.Reaction","page":"Catalyst.jl API","title":"ModelingToolkit.Reaction","text":"struct Reaction{S<:Variable, T<:Number}\n\nOne chemical reaction.\n\nFields\n\nrate\nThe rate function (excluding mass action terms).\nsubstrates\nReaction substrates.\nproducts\nReaction products.\nsubstoich\nThe stoichiometric coefficients of the reactants.\nprodstoich\nThe stoichiometric coefficients of the products.\nnetstoich\nThe net stoichiometric coefficients of all species changed by the reaction.\nonly_use_rate\nfalse (default) if rate should be multiplied by mass action terms to give the rate law. true if rate represents the full reaction rate law.\n\nExamples\n\nusing ModelingToolkit\n@parameters t k[1:20]\n@variables A(t) B(t) C(t) D(t)\nrxs = [Reaction(k[1], nothing, [A]),            # 0 -> A\n       Reaction(k[2], [B], nothing),            # B -> 0\n       Reaction(k[3],[A],[C]),                  # A -> C\n       Reaction(k[4], [C], [A,B]),              # C -> A + B\n       Reaction(k[5], [C], [A], [1], [2]),      # C -> A + A\n       Reaction(k[6], [A,B], [C]),              # A + B -> C\n       Reaction(k[7], [B], [A], [2], [1]),      # 2B -> A\n       Reaction(k[8], [A,B], [A,C]),            # A + B -> A + C\n       Reaction(k[9], [A,B], [C,D]),            # A + B -> C + D\n       Reaction(k[10], [A], [C,D], [2], [1,1]), # 2A -> C + D\n       Reaction(k[11], [A], [A,B], [2], [1,1]), # 2A -> A + B\n       Reaction(k[12], [A,B,C], [C,D], [1,3,4], [2, 3]),          # A+3B+4C -> 2C + 3D\n       Reaction(k[13], [A,B], nothing, [3,1], nothing),           # 3A+B -> 0\n       Reaction(k[14], nothing, [A], nothing, [2]),               # 0 -> 2A\n       Reaction(k[15]*A/(2+A), [A], nothing; only_use_rate=true), # A -> 0 with custom rate\n       Reaction(k[16], [A], [B]; only_use_rate=true),             # A -> B with custom rate.\n       Reaction(k[17]*A*exp(B), [C], [D], [2], [1]),              # 2C -> D with non constant rate.\n       Reaction(k[18]*B, nothing, [B], nothing, [2]),             # 0 -> 2B with non constant rate.\n       Reaction(k[19]*t, [A], [B]),                                # A -> B with non constant rate.\n       Reaction(k[20]*t*A, [B,C], [D],[2,1],[2])                  # 2A +B -> 2C with non constant rate.\n  ]\n\nNotes:\n\nnothing can be used to indicate a reaction that has no reactants or no products. In this case the corresponding stoichiometry vector should also be set to nothing.\nThe three-argument form assumes all reactant and product stoichiometric coefficients are one.\n\n\n\n\n\n","category":"type"},{"location":"api/catalyst_api/#ModelingToolkit.ReactionSystem","page":"Catalyst.jl API","title":"ModelingToolkit.ReactionSystem","text":"struct ReactionSystem <: ModelingToolkit.AbstractSystem\n\nA system of chemical reactions.\n\nFields\n\neqs\nThe reactions defining the system.\niv\nIndependent variable (usually time).\nstates\nDependent (state) variables representing amount of each species.\nps\nParameter variables.\npins\nobserved\nname\nThe name of the system\nsystems\nsystems: The internal systems\n\nExample\n\nContinuing from the example in the Reaction definition:\n\nrs = ReactionSystem(rxs, t, [A,B,C,D], k)\n\n\n\n\n\n","category":"type"},{"location":"api/catalyst_api/#Basic-properties","page":"Catalyst.jl API","title":"Basic properties","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"species\nspeciesmap\nparams\nparamsmap \nreactions\nnumspecies \nnumparams\nnumreactions","category":"page"},{"location":"api/catalyst_api/#Catalyst.species","page":"Catalyst.jl API","title":"Catalyst.species","text":"species(network)\n\nGiven a ReactionSystem, return a vector of species Variables.\n\nNotes:\n\nIf network.systems is not empty may allocate. Otherwise returns network.states.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.speciesmap","page":"Catalyst.jl API","title":"Catalyst.speciesmap","text":"speciesmap(network)\n\nGiven a ReactionSystem, return a Dictionary mapping from species Variables to species indices. (Allocates)\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.params","page":"Catalyst.jl API","title":"Catalyst.params","text":"params(network)\n\nGiven a ReactionSystem, return a vector of parameter Variables.\n\nNotes:\n\nIf network.systems is not empty may allocate. Otherwise returns network.ps.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.paramsmap","page":"Catalyst.jl API","title":"Catalyst.paramsmap","text":"paramsmap(network)\n\nGiven a ReactionSystem, return a Dictionary mapping from parameter Variables to parameter indices. (Allocates)\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.reactions","page":"Catalyst.jl API","title":"Catalyst.reactions","text":"reactions(network)\n\nGiven a ReactionSystem, return a vector of all Reactions in the system.\n\nNotes:\n\nIf network.systems is not empty may allocate. Otherwise returns network.eqs.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.numspecies","page":"Catalyst.jl API","title":"Catalyst.numspecies","text":"numspecies(network)\n\nReturn the number of species within the given ReactionSystem.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.numparams","page":"Catalyst.jl API","title":"Catalyst.numparams","text":"numparams(network)\n\nReturn the number of parameters within the given ReactionSystem.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.numreactions","page":"Catalyst.jl API","title":"Catalyst.numreactions","text":"numreactions(network)\n\nReturn the number of reactions within the given ReactionSystem.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Reaction-Properties","page":"Catalyst.jl API","title":"Reaction Properties","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"ModelingToolkit.ismassaction\ndependents\ndependants","category":"page"},{"location":"api/catalyst_api/#ModelingToolkit.ismassaction","page":"Catalyst.jl API","title":"ModelingToolkit.ismassaction","text":"ismassaction(rx, rs; rxvars = get_variables(rx.rate),\n                              haveivdep = any(var -> isequal(rs.iv,convert(Variable,var)), rxvars),\n                              stateset = Set(states(rs)))\n\nTrue if a given reaction is of mass action form, i.e. rx.rate does not depend on any chemical species that correspond to states of the system, and does not depend explicitly on the independent variable (usually time).\n\nArguments\n\nrx, the Reaction.\nrs, a ReactionSystem containing the reaction.\nOptional: rxvars, Variables which are not in rxvars are ignored as possible dependencies.\nOptional: haveivdep, true if the Reaction rate field explicitly depends on the independent variable.\nOptional: stateset, set of states which if the rxvars are within mean rx is non-mass action.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.dependents","page":"Catalyst.jl API","title":"Catalyst.dependents","text":"dependents(rx, network)\n\nGiven a Reaction and a ReactionSystem, return a vector of ModelingToolkit.Operations corresponding to species the reaction rate law depends on. i.e. for\n\nk*W, 2X + 3Y --> 5Z + W\n\nthe returned vector would be [W(t),X(t),Y(t)].\n\nNotes:\n\nAllocates\nDoes not check for dependents within any subsystems.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.dependants","page":"Catalyst.jl API","title":"Catalyst.dependants","text":"dependents(rx, network)\n\nSee documentation for dependents.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Functions-to-extend-a-Network","page":"Catalyst.jl API","title":"Functions to extend a Network","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"@add_reactions\naddspecies!\naddparam!\naddreaction!\nmerge!(network1::ReactionSystem, network2::ReactionSystem)\nmerge(network1::ReactionSystem, network2::ReactionSystem)","category":"page"},{"location":"api/catalyst_api/#Catalyst.@add_reactions","page":"Catalyst.jl API","title":"Catalyst.@add_reactions","text":"@add_reactions\n\nAdds the reactions declared to a preexisting ReactionSystem. All parameters used in the added reactions need to be declared after the reactions.\n\nSee the Catalyst.jl for Reaction Models documentation for details on parameters to the macro.\n\n\n\n\n\n","category":"macro"},{"location":"api/catalyst_api/#Catalyst.addspecies!","page":"Catalyst.jl API","title":"Catalyst.addspecies!","text":"addspecies!(network::ReactionSystem, s::Variable; disablechecks=false)\n\nGiven a ReactionSystem, add the species corresponding to the variable s to the network (if it is not already defined). Returns the integer id of the species within the system.\n\nNotes:\n\ndisablechecks will disable checking for whether the passed in variable is already defined, which is useful when adding many new variables to the system. Do not disable checks unless you are sure the passed in variable is a new variable, as this will potentially leave the system in an undefined state.\n\n\n\n\n\naddspecies!(network::ReactionSystem, s::Operation; disablechecks=false)\n\nGiven a ReactionSystem, add the species corresponding to the variable s to the network (if it is not already defined). Returns the integer id of the species within the system.\n\ndisablechecks will disable checking for whether the passed in variable is already defined, which is useful when adding many new variables to the system. Do not disable checks unless you are sure the passed in variable is a new variable, as this will potentially leave the system in an undefined state.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.addparam!","page":"Catalyst.jl API","title":"Catalyst.addparam!","text":"addparam!(network::ReactionSystem, p::Variable; disablechecks=false)\n\nGiven a ReactionSystem, add the parameter corresponding to the variable p to the network (if it is not already defined). Returns the integer id of the parameter within the system.\n\ndisablechecks will disable checking for whether the passed in variable is already defined, which is useful when adding many new variables to the system. Do not disable checks unless you are sure the passed in variable is a new variable, as this will potentially leave the system in an undefined state.\n\n\n\n\n\naddparam!(network::ReactionSystem, p::Operation; disablechecks=false)\n\nGiven a ReactionSystem, add the parameter corresponding to the variable p to the network (if it is not already defined). Returns the integer id of the parameter within the system.\n\ndisablechecks will disable checking for whether the passed in variable is already defined, which is useful when adding many new variables to the system. Do not disable checks unless you are sure the passed in variable is a new variable, as this will potentially leave the system in an undefined state.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Catalyst.addreaction!","page":"Catalyst.jl API","title":"Catalyst.addreaction!","text":"addreaction!(network::ReactionSystem, rx::Reaction)\n\nAdd the passed in reaction to the ReactionSystem. Returns the integer id of rx in the list of Reactions within network.\n\nNotes:\n\nAny new species or parameters used in rx should be separately added to   network using addspecies! and addparam!.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Base.merge!-Tuple{ReactionSystem,ReactionSystem}","page":"Catalyst.jl API","title":"Base.merge!","text":"merge!(network1::ReactionSystem, network2::ReactionSystem)\n\nMerge network2 into network1.\n\nNotes:\n\nDuplicate reactions between the two networks are not filtered out.\nReactions are not deepcopied to minimize allocations, so both networks will share underlying data arrays.\nSubsystems are not deepcopied between the two networks and will hence be shared.\nReturns network1\n\n\n\n\n\n","category":"method"},{"location":"api/catalyst_api/#Base.merge-Tuple{ReactionSystem,ReactionSystem}","page":"Catalyst.jl API","title":"Base.merge","text":"merge(network1::ReactionSystem, network2::ReactionSystem)\n\nCreate a new network merging network1 and network2.\n\nNotes:\n\nDuplicate reactions between the two networks are not filtered out.\nReactions are not deepcopied to minimize allocations, so the new network will share underlying data arrays.\nSubsystems are not deepcopied between the two networks and will hence be shared.\nReturns the merged network.\n\n\n\n\n\n","category":"method"},{"location":"api/catalyst_api/#Generated-ModelingToolkit-Operations","page":"Catalyst.jl API","title":"Generated ModelingToolkit Operations","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"As the underlying ReactionSystem is comprised of ModelingToolkit.Operations and ModelingToolkit.Variables, one can directly access the generated rate laws, and using ModelingToolkit tooling generate functions or Julia Exprs from them.","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"ModelingToolkit.oderatelaw\nModelingToolkit.jumpratelaw","category":"page"},{"location":"api/catalyst_api/#ModelingToolkit.oderatelaw","page":"Catalyst.jl API","title":"ModelingToolkit.oderatelaw","text":"oderatelaw(rx; combinatoric_ratelaw=true)\n\nGiven a Reaction, return the reaction rate law Operation used in generated ODEs for the reaction. Note, for a reaction defined by\n\nk*X*Y, X+Z --> 2X + Y\n\nthe expression that is returned will be k*X(t)^2*Y(t)*Z(t). For a reaction of the form\n\nk, 2X+3Y --> Z\n\nthe Operation that is returned will be k * (X(t)^2/2) * (Y(t)^3/6).\n\nNotes:\n\nAllocates\ncombinatoric_ratelaw=true uses factorial scaling factors in calculating the rate   law, i.e. for 2S -> 0 at rate k the ratelaw would be k*S^2/2!. If   combinatoric_ratelaw=false then the ratelaw is k*S^2, i.e. the scaling factor is   ignored.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#ModelingToolkit.jumpratelaw","page":"Catalyst.jl API","title":"ModelingToolkit.jumpratelaw","text":"jumpratelaw(rx; rxvars=get_variables(rx.rate), combinatoric_ratelaw=true)\n\nGiven a Reaction, return the reaction rate law Operation used in generated stochastic chemical kinetics model SSAs for the reaction. Note, for a reaction defined by\n\nk*X*Y, X+Z --> 2X + Y\n\nthe expression that is returned will be k*X^2*Y*Z. For a reaction of the form\n\nk, 2X+3Y --> Z\n\nthe Operation that is returned will be k * binomial(X,2) * binomial(Y,3).\n\nNotes:\n\nrxvars should give the Variables, i.e. species and parameters, the rate depends on.\nAllocates\ncombinatoric_ratelaw=true uses binomials in calculating the rate law, i.e. for 2S -> 0 at rate k the ratelaw would be k*S*(S-1)/2. If combinatoric_ratelaw=false then the ratelaw is k*S*(S-1), i.e. the rate law is not normalized by the scaling factor.\n\n\n\n\n\n","category":"function"},{"location":"api/catalyst_api/#Network-Comparison-Functions","page":"Catalyst.jl API","title":"Network Comparison Functions","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"==(rn1::ReactionSystem, rn2::ReactionSystem)\n==(rn1::Reaction, rn2::Reaction)","category":"page"},{"location":"api/catalyst_api/#Base.:==-Tuple{ReactionSystem,ReactionSystem}","page":"Catalyst.jl API","title":"Base.:==","text":"==(rn1::ReactionSystem, rn2::ReactionSystem)\n\nTests whether the underlying species Variabless, parameter Variabless and reactions are the same in the two ReactionSystems. Ignores order network components were defined.\n\nNotes:\n\nDoes not currently simplify rates, so a rate of A^2+2*A+1 would be   considered different than (A+1)^2.\nFlattens subsystems, and hence may allocate, when checking equality.\n\n\n\n\n\n","category":"method"},{"location":"api/catalyst_api/#Base.:==-Tuple{Reaction,Reaction}","page":"Catalyst.jl API","title":"Base.:==","text":"==(rn1::Reaction, rn2::Reaction)\n\nTests whether two Reactions are identical.\n\nNotes:\n\nIgnores the order in which stoichiometry components are listed.\nDoes not currently simplify rates, so a rate of A^2+2*A+1 would be   considered different than (A+1)^2.\n\n\n\n\n\n","category":"method"},{"location":"api/catalyst_api/#Displaying-Networks","page":"Catalyst.jl API","title":"Displaying Networks","text":"","category":"section"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"Latexify can be used to convert networks to LaTeX mhchem equations by","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"using Latexify\nlatexify(rn)","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"If Graphviz and Catlab.jl are installed, they can be used to create and save Graphviz network diagrams using Graph and savegraph.","category":"page"},{"location":"api/catalyst_api/","page":"Catalyst.jl API","title":"Catalyst.jl API","text":"Graph\nsavegraph","category":"page"},{"location":"api/catalyst_api/#Catlab.Graphics.Graphviz.Graph","page":"Catalyst.jl API","title":"Catlab.Graphics.Graphviz.Graph","text":"Graph(rn::ReactionSystem)\n\nConverts a ReactionSystem into a Catlab.jl Graphviz graph. Reactions correspond to small green circles, and species to blue circles. \n\nNotes:\n\nBlack arrows from species to reactions indicate reactants, and are labelled with their input stoichiometry. \nBlack arrows from reactions to species indicate products, and are labelled with their output stoichiometry. \nRed arrows from species to reactions indicate that species is used within the rate expression. For example in the reaction k*A, B --> C, there would be a red arrow from A to the reaction node. In k*A, A+B --> C there would be red and black arrows from A to the reaction node.\n\n\n\n\n\n","category":"type"},{"location":"api/catalyst_api/#Catalyst.savegraph","page":"Catalyst.jl API","title":"Catalyst.savegraph","text":"savegraph(g::Graph, fname, fmt=\"png\")\n\nGiven a Catlab.jl Graph generated by Graph, save the graph to the file with name fname and extension fmt. \n\nNotes:\n\nfmt=\"png\" is the default output format.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/advanced/#The-Reaction-DSL-Advanced","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"","category":"section"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"This section covers some of the more advanced syntax and features for building chemical reaction network models (still not very complicated!).","category":"page"},{"location":"tutorials/advanced/#User-defined-functions-in-reaction-rates","page":"The Reaction DSL - Advanced","title":"User defined functions in reaction rates","text":"","category":"section"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"The reaction network DSL cannot \"see\" user defined functions. E.g. this is not correct syntax:","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"myHill(x) = 2.0*x^3/(x^3+1.5^3)\nrn = @reaction_network begin\n  myHill(X), ∅ → X\nend","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"However, it is possible to define functions in such a way that the DSL can see them using the @reaction_func macro:","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"@reaction_func myHill(x) = 2.0*x^3/(x^3+1.5^3)\nrn = @reaction_network begin\n  myHill(X), ∅ → X\nend","category":"page"},{"location":"tutorials/advanced/#Ignoring-mass-action-kinetics","page":"The Reaction DSL - Advanced","title":"Ignoring mass action kinetics","text":"","category":"section"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"While generally one wants the reaction rate to use the law of mass action, so the reaction","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"rn = @reaction_network begin\n  k, X → ∅\nend k","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"occurs at the rate dXdt = -kX, it is possible to ignore this by using any of the following non-filled arrows when declaring the reaction: ⇐, ⟽, ⇒, ⟾, ⇔, ⟺. This means that the reaction","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"rn = @reaction_network begin\n  k, X ⇒ ∅\nend k","category":"page"},{"location":"tutorials/advanced/","page":"The Reaction DSL - Advanced","title":"The Reaction DSL - Advanced","text":"will occur at rate dXdt = -k (which might become a problem since X will be degraded at a constant rate even when very small or equal to 0.","category":"page"},{"location":"tutorials/basic_examples/#Basic-Chemical-Reaction-Network-Examples","page":"Basic Chemical Reaction Network Examples","title":"Basic Chemical Reaction Network Examples","text":"","category":"section"},{"location":"tutorials/basic_examples/#Example:-Birth-Death-Process","page":"Basic Chemical Reaction Network Examples","title":"Example: Birth-Death Process","text":"","category":"section"},{"location":"tutorials/basic_examples/","page":"Basic Chemical Reaction Network Examples","title":"Basic Chemical Reaction Network Examples","text":"rs = @reaction_network begin\n  c1, X --> 2X\n  c2, X --> 0\n  c3, 0 --> X\nend c1 c2 c3\np = (1.0,2.0,50.) # [c1,c2,c3]\ntspan = (0.,4.)\nu0 = [5.]         # [X]\n\n# solve ODEs\noprob = ODEProblem(rs, u0, tspan, p)\nosol  = solve(oprob, Tsit5())\n\n# solve for Steady-States\nssprob = SteadyStateProblem(rs, u0, p)\nsssol  = solve(ssprob, SSRootfind())\n\n# solve SDEs\nsprob = SDEProblem(rs, u0, tspan, p)\nssol  = solve(sprob, EM(), dt=.01)\n\n# solve JumpProblem\nu0 = [5]\ndprob = DiscreteProblem(rs, u0, tspan, p)\njprob = JumpProblem(rs, dprob, Direct())\njsol = solve(jprob, SSAStepper())","category":"page"},{"location":"tutorials/basic_examples/#Example:-Michaelis-Menten-Enzyme-Kinetics","page":"Basic Chemical Reaction Network Examples","title":"Example: Michaelis-Menten Enzyme Kinetics","text":"","category":"section"},{"location":"tutorials/basic_examples/","page":"Basic Chemical Reaction Network Examples","title":"Basic Chemical Reaction Network Examples","text":"rs = @reaction_network begin\n  c1, S + E --> SE\n  c2, SE --> S + E\n  c3, SE --> P + E\nend c1 c2 c3\np = (0.00166,0.0001,0.1)   # [c1,c2,c3]\ntspan = (0., 100.)\nu0 = [301., 100., 0., 0.]  # [S,E,SE,P]\n\n# solve ODEs\noprob = ODEProblem(rs, u0, tspan, p)\nosol  = solve(oprob, Tsit5())\n\n# solve JumpProblem\nu0 = [301, 100, 0, 0] \ndprob = DiscreteProblem(rs, u0, tspan, p)\njprob = JumpProblem(rs, dprob, Direct())\njsol = solve(jprob, SSAStepper())","category":"page"},{"location":"tutorials/basics/#The-Reaction-DSL","page":"The Reaction DSL","title":"The Reaction DSL","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"This tutorial covers some of the basic syntax for building chemical reaction network models. Examples showing how to both construct and solve ODE, SDE and jump models are provided in Basic Chemical Reaction Network Examples.","category":"page"},{"location":"tutorials/basics/#Basic-syntax","page":"The Reaction DSL","title":"Basic syntax","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"The @reaction_network macro allows the (symbolic) specification of reaction networks with a simple format. Its input is a set of chemical reactions, and from them it generates a ReactionSystem reaction network object. The ReactionSystem can be used as input to ODEProblem, SteadyStateProblem, SDEProblem, JumpProblem and more. ReactionSystems can also be incrementally extended as needed, allowing for programmatic construction of networks and network composition.","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"The basic syntax is:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  2.0, X + Y --> XY               \n  1.0, XY --> Z1 + Z2            \nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"where each line corresponds to a chemical reaction. Each reaction consists of a reaction rate (the expression on the left hand side of  ,), a set of substrates (the expression in-between , and -->), and a set of products (the expression on the right hand side of -->). The substrates and the products may contain one or more reactants, separated by +.  The naming convention for these are the same as for normal variables in Julia.","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"The chemical reaction model is generated by the @reaction_network macro and stored in the rn variable (a normal Julia variable, which does not need to be called rn). The generated ReactionSystem can be converted to a differential equation model via","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"osys = convert(ODESystem, rn)\noprob = ODEProblem(osys, Pair.(species(rn),u0), t, Pair.(params(rn),p))","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"or more directly via","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"oprob = ODEProblem(rn, u0, t, p)","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"For more detailed examples see the Basic Chemical Reaction Network Examples. The generated differential equations use the law of mass action. For the above example the ODEs are then","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"fracdXdt = -2 X Y\nfracdYdt = -2 X Y\nfracdXYdt = 2 X Y - XY\nfracdZ1dt= XY\nfracdZ2dt = XY","category":"page"},{"location":"tutorials/basics/#Arrow-variants","page":"The Reaction DSL","title":"Arrow variants","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"A variety of unicode arrows are accepted by the DSL in addition to -->. All of these work:  >, → ↣, ↦, ⇾, ⟶, ⟼, ⥟, ⥟, ⇀, ⇁. Backwards arrows can also be used to write the reaction in the opposite direction. For example, these three reactions are equivalent:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  1.0, X + Y --> XY               \n  1.0, X + Y → XY      \n  1.0, XY ← X + Y      \nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Note, currently Julia's parser does not support <--, <-> or <-->, so that --> is the only supported plain text arrow.","category":"page"},{"location":"tutorials/basics/#Using-bi-directional-arrows","page":"The Reaction DSL","title":"Using bi-directional arrows","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Bi-directional unicode arrows can be used to designate a reaction that goes two ways. These two models are equivalent:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  2.0, X + Y → XY             \n  2.0, X + Y ← XY          \nend\nrn = @reaction_network begin\n  2.0, X + Y ↔ XY               \nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"If the reaction rates in the backward and forward directions are different they can be designated in the following way:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  (2.0,1.0) X + Y ↔ XY               \nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"which is identical to","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  2.0, X + Y → XY             \n  1.0, X + Y ← XY          \nend","category":"page"},{"location":"tutorials/basics/#Combining-several-reactions-in-one-line","page":"The Reaction DSL","title":"Combining several reactions in one line","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Several similar reactions can be combined in one line by providing a tuple of reaction rates and/or substrates and/or products. If several tuples are provided they must all be of identical length. These pairs of reaction networks are all identical:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn1 = @reaction_network begin\n  1.0, S → (P1,P2)               \nend\nrn2 = @reaction_network begin\n  1.0, S → P1     \n  1.0, S → P2\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn1 = @reaction_network begin\n  (1.0,2.0), (S1,S2) → P             \nend\nrn2 = @reaction_network begin\n  1.0, S1 → P     \n  2.0, S2 → P\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn1 = @reaction_network begin\n  (1.0,2.0,3.0), (S1,S2,S3) → (P1,P2,P3)        \nend\nrn2 = @reaction_network begin\n  1.0, S1 → P1\n  2.0, S2 → P2   \n  3.0, S3 → P3  \nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"This can also be combined with bi-directional arrows, in which case separate tuples can be provided for the backward and forward reaction rates. These reaction networks are identical","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn1 = @reaction_network begin\n (1.0,(1.0,2.0)), S ↔ (P1,P2)  \nend\nrn2 = @reaction_network begin\n  1.0, S → P1\n  1.0, S → P2\n  1.0, P1 → S   \n  2.0, P2 → S\nend","category":"page"},{"location":"tutorials/basics/#Production-and-Destruction-and-Stoichiometry","page":"The Reaction DSL","title":"Production and Destruction and Stoichiometry","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Sometimes reactants are produced/destroyed from/to nothing. This can be designated using either 0 or ∅:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  2.0, 0 → X\n  1.0, X → ∅\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"If several molecules of the same reactant are involved in a reaction, the stoichiometry of a reactant in a reaction can be set using a number. Here two molecules of species X form the dimer X2:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  1.0, 2X → X2\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"this corresponds to the differential equation:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"fracdXdt = -X^2\nfracdX2dt = frac12 X^2","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Other numbers than 2 can be used, and parenthesis can be used to reuse the same stoichiometry for several reactants:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  1.0, X + 2(Y + Z) → XY2Z2\nend","category":"page"},{"location":"tutorials/basics/#Variable-reaction-rates","page":"The Reaction DSL","title":"Variable reaction rates","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Reaction rates do not need to be constant, but can also depend on the current concentration of the various reactants (when e.g. one reactant can activate the production of another). E.g. this is a valid notation:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  X, Y → ∅\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"and will have Y degraded at rate","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"fracdYdt = -XY","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Note that this is actually equivalent to the reaction","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  1.0, X + Y → X\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"except that the latter will be classified as ismassaction and the former will not, which can impact optimizations used in generating JumpSystems. For this reason, it is recommended to use the latter representation when possible.","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Most expressions and functions are valid reaction rates, e.g:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  2.0*X^2, 0 → X + Y\n  gamma(Y)/5, X → ∅\n  pi*X/Y, Y → ∅\nend","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"but please note that user defined functions cannot be called directly (see later section User defined functions in reaction rates).","category":"page"},{"location":"tutorials/basics/#Defining-parameters","page":"The Reaction DSL","title":"Defining parameters","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Parameter values do not need to be set when the model is created. Components can be designated as symbolic parameters by declaring them at the end:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn = @reaction_network begin\n  p, ∅ → X\n  d, X → ∅\nend p d","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Parameters can only exist in the reaction rates (where they can be mixed with reactants). All variables not declared after end will be treated as a chemical species, and may lead to undefined behavior if unchanged by all reactions.","category":"page"},{"location":"tutorials/basics/#Pre-defined-functions","page":"The Reaction DSL","title":"Pre-defined functions","text":"","category":"section"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Hill functions and a Michaelis-Menten function are pre-defined and can be used as rate laws. Below, the pair of reactions within rn1 are equivalent, as are the pair of reactions within rn2:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn1 = @reaction_network begin\n  hill(X,v,K,n), ∅ → X\n  v*X^n/(X^n+K^n), ∅ → X\nend v K n\nrn2 = @reaction_network begin\n  mm(X,v,K), ∅ → X\n  v*X/(X+K), ∅ → X\nend v K","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"Repressor Hill (hillr) and Michaelis-Menten (mmr) functions are also provided:","category":"page"},{"location":"tutorials/basics/","page":"The Reaction DSL","title":"The Reaction DSL","text":"rn1 = @reaction_network begin\n  hillr(X,v,K,n), ∅ → X\n  v*K^n/(X^n+K^n), ∅ → X\nend v K n\nrn2 = @reaction_network begin\n  mmr(X,v,K), ∅ → X\n  v*K/(X+K), ∅ → X\nend v K","category":"page"},{"location":"tutorials/generated_systems/#The-generated-[ReactionSystem](@ref)-and-[Reaction](@ref)s","page":"The generated ReactionSystem and Reactions","title":"The generated ReactionSystem and Reactions","text":"","category":"section"},{"location":"tutorials/generated_systems/","page":"The generated ReactionSystem and Reactions","title":"The generated ReactionSystem and Reactions","text":"The @reaction_network macro generates a ReactionSystem object, which has a number of fields that can be accessed directly or via the Catalyst.jl API (the recommended route). Below we list these components, with the recommended API method listed first:","category":"page"},{"location":"tutorials/generated_systems/","page":"The generated ReactionSystem and Reactions","title":"The generated ReactionSystem and Reactions","text":"species(rn), states(rn) and rn.states is a vector of all the chemical species within the system, each represented as a ModelingToolkit.Variable.\nparams(rn), parameters(rn) and rn.ps is a vector of all the parameters within the system, each represented as a ModelingToolkit.Variable.\nreactions(rn), equations(rn) and rn.eqs is a vector of all the Reactions within the system.\nindependent_variable(rn) and rn.iv are the independent variable of the system , usually t for time, represented as a ModelingToolkit.Variable. ","category":"page"},{"location":"tutorials/generated_systems/","page":"The generated ReactionSystem and Reactions","title":"The generated ReactionSystem and Reactions","text":"Each Reaction within reactions(rn) has a number of subfields. For rx a Reaction we have","category":"page"},{"location":"tutorials/generated_systems/","page":"The generated ReactionSystem and Reactions","title":"The generated ReactionSystem and Reactions","text":"rx.substrates, a vector of ModelingToolkit.Operations storing each substrate variable.\nrx.products, a vector of ModelingToolkit.Operations storing each product variable.\nrx.substoich, a vector storing the corresponding integer stoichiometry of each substrate species in rx.substrates.\nrx.prodstoich, a vector storing the corresponding integer stoichiometry of each product species in rx.products.\nrx.rate, a ModelingToolkit.Operation representing the reaction rate. e.g. for a reaction like k*X, Y --> X+Y we'd have rate = k*X.\nrx.netstoich, a vector of pairs mapping the ModelingToolkit.Variable for each species that changes numbers by the reaction to how much it changes. E.g. for k, X + 2Y --> X + W we'd have rx.netstoich = [Y => -2, W => 1]. \nrx.only_use_rate, a boolean that is true if the reaction was made with non-filled arrows and should ignore mass action kinetics. false by default.","category":"page"},{"location":"tutorials/generated_systems/","page":"The generated ReactionSystem and Reactions","title":"The generated ReactionSystem and Reactions","text":"Empty ReactionSystems can be generated via make_empty_network or @reaction_network with no arguments. ReactionSystems can be programmatically extended using addspecies!, addparam!, addreaction!, @add_reactions, or composed using merge and merge!.","category":"page"},{"location":"tutorials/advanced_examples/#Advanced-Chemical-Reaction-Network-Examples","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"","category":"section"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"For additional flexibility we can convert the generated ReactionSystem first to another ModelingToolkit.AbstractSystem, e.g. an ODESystem, SDESystem, JumpSystem, etc. These systems can then be used in problem generation. Please also see the ModelingToolkit docs, which give many options for optimized problem generation (i.e. generating dense or sparse Jacobians with or without threading and/or parallelization), creating LaTeX representations for systems, etc.","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"Note, when generating problems from other system types, u0 and p must provide vectors of Pairs that map each Variable corresponding to a species or parameter to their numerical value. E.g. for the Michaelis-Menten example above we'd use","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"rs = @reaction_network begin\n  c1, X --> 2X\n  c2, X --> 0\n  c3, 0 --> X\nend c1 c2 c3\np     = (1.0,2.0,50.) \ntspan = (0.,4.)\nu0    = [5.]   \nosys  = convert(ODESystem, rs)\nu0map = map((x,y) -> Pair(x,y), species(rs), u0)\npmap  = map((x,y) -> Pair(x,y), params(rs), p)\noprob = ODEProblem(osys, u0map, tspan, pmap)\nsol   = solve(oprob, Tsit5())","category":"page"},{"location":"tutorials/advanced_examples/#Example:-Disabling-rescaling-of-reaction-rates","page":"Advanced Chemical Reaction Network Examples","title":"Example: Disabling rescaling of reaction rates","text":"","category":"section"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"As explained in the Reaction rate laws used in simulations section, for a reaction such as k, 2X --> 0, the generated rate law will rescale the rate constant, giving k*X^2/2 instead of k*X^2 for ODEs and k*X*(X-1)/2 instead of k*X*(X-1) for jumps. This can be disabled when directly converting a ReactionSystem. If rn is a generated ReactionSystem we can do","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"osys = convert(ODESystem, rn; combinatoric_ratelaws=false)","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"Disabling these rescalings should work for all conversions of ReactionSystems to other ModelingToolkit.AbstractSystems.","category":"page"},{"location":"tutorials/advanced_examples/#Example:-Modifying-generated-ODEs-by-adding-forcing","page":"Advanced Chemical Reaction Network Examples","title":"Example: Modifying generated ODEs by adding forcing","text":"","category":"section"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"Conversion to other ModelingToolkit.AbstractSystems allows the possibility to modify the system with further terms that are difficult to encode as a chemical reaction. For example, suppose we wish to add a forcing term, 10sin(10t), to the ODE for dX/dt above. We can do so as:","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"dXdteq = equations(osys)[1]           \nt      = independent_variable(osys)()    \ndXdteq = Equation(dXdteq.lhs, dXdteq.rhs + 10*sin(10*t))   \nosys2  = ODESystem([dXdteq], t, states(osys), parameters(osys))\noprob  = ODEProblem(osys2, u0map, tspan, pmap)\nosol   = solve(oprob, Tsit5())","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"We can add e^-X to dXdt as a forcing term by","category":"page"},{"location":"tutorials/advanced_examples/","page":"Advanced Chemical Reaction Network Examples","title":"Advanced Chemical Reaction Network Examples","text":"dXdteq = equations(osys)[1]           \n@variables X\ndXdteq = Equation(dXdteq.lhs, dXdteq.rhs + exp(-X))   \nosys2  = ODESystem([dXdteq], t, states(osys), parameters(osys))\noprob  = ODEProblem(osys2, u0map, tspan, pmap)\nosol   = solve(oprob, Tsit5())","category":"page"},{"location":"#Catalyst.jl-for-Reaction-Models","page":"Home","title":"Catalyst.jl for Reaction Models","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Catalyst.jl is a domain specific language (DSL) for high performance simulation and modeling of chemical reaction networks. Catalyst utilizes ModelingToolkit ReactionSystems, leveraging ModelingToolkit to enable large-scale simulations through auto-vectorization and parallelism. ReactionSystemss can be used to generate ModelingToolkit-based models, allowing the easy simulation and parameter estimation of mass action ODE models, Chemical Langevin SDE models, stochastic chemical kinetics jump process models, and more. Generated models can be used with solvers throughout the broader SciML ecosystem, including higher level SciML packages (e.g. for sensitivity analysis, parameter estimation, machine learning applications, etc).","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DSL provides a simple and readable format for manually specifying chemical reactions.\nThe Catalyst.jl API provides functionality for extending networks, building networks programmatically, and for composing multiple networks together.\nReactionSystems generated by the DSL can be converted to a variety of ModelingToolkit.AbstractSystems, including ODE, SDE and jump process representations.\nBy leveraging ModelingToolkit, users have a variety of options for generating optimized system representations to use in solvers. These include construction of dense or sparse Jacobians, multithreading or parallelization of generated derivative functions, automatic classification of reactions into optimized jump types for Gillespie type simulations, automatic construction of dependency graphs for jump systems, and more.\nGenerated systems can be solved using any DifferentialEquations.jl ODE/SDE/jump solver, and can be used within EnsembleProblems for carrying out GPU-parallelized parameter sweeps and statistical sampling. Plot recipes are available for visualizing the solutions.\nJulia Exprs can be obtained for all rate laws and functions determining the deterministic and stochastic terms within resulting ODE, SDE or jump models.\nLatexify can be used to generate LaTeX expressions corresponding to generated mathematical models or the underlying set of reactions.\nGraphviz can be used through Catlab.jl to generate and visualize reaction network graphs.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Catalyst can be installed through the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add Catalyst\nusing Catalyst","category":"page"},{"location":"#Illustrative-Example","page":"Home","title":"Illustrative Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a simple example of generating, visualizing and solving an SIR ODE model. We first define the SIR reaction model using Catalyst","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Catalyst\nrn = @reaction_network begin\n    α, S + I --> 2I\n    β, I --> R\nend α β","category":"page"},{"location":"","page":"Home","title":"Home","text":"Assuming Graphviz and Catlab.jl are installed, the network can be visualized using the Graph command","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Catlab.Graphics.Graphviz\nGraph(rn)","category":"page"},{"location":"","page":"Home","title":"Home","text":"which in Jupyter notebooks will give the figure","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: SIR Network Graph)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To generate and solve a mass action ODE version of the model we use","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DiffEqBase, OrdinaryDiffEq\np     = [.1/1000, .01]           # [α,β]\ntspan = (0.0,250.0)\nu0    = [999.0,1.0,0.0]          # [S,I,R] at t=0\nop    = ODEProblem(rn, u0, tspan, p)\nsol   = solve(op, Tsit5())       # use Tsit5 ODE solver","category":"page"},{"location":"","page":"Home","title":"Home","text":"which we can plot as","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\nplot(sol, lw=2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: SIR Solution)","category":"page"},{"location":"tutorials/models/#Model-Simulation","page":"Model Simulation","title":"Model Simulation","text":"","category":"section"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"Once created, a reaction network can be used as input to various problem types which can be solved by DifferentialEquations.jl, and more broadly used within SciML packages.","category":"page"},{"location":"tutorials/models/#Deterministic-simulations-using-ODEs","page":"Model Simulation","title":"Deterministic simulations using ODEs","text":"","category":"section"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"A reaction network can be used as input to an ODEProblem instead of a function, using ","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"odeprob = ODEProblem(rn, args...; kwargs...) ","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"E.g. a model can be created and solved using:","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"using DiffEqBase, OrdinaryDiffEq\nrn = @reaction_network begin\n  p, ∅ → X\n  d, X → ∅\nend p d\np = [1.0,2.0]\nu0 = [0.1]\ntspan = (0.,1.)\nprob = ODEProblem(rn,u0,tspan,p)\nsol = solve(prob, Tsit5())","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"Here the order of unknowns in u0 and p matches the order that species and parameters first appear within the DSL. They can also be determined by examining the ordering within the species(rn) and params(rn) vectors, or accessed more explicitly through the speciesmap(rn) and paramsmap(rn) dictionaries, which map the ModelingToolkit Variables corresponding to each species or parameter to their integer id. Note, if no parameters are given in the @reaction_network then p does not need to be provided.","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"We can then plot the solution using the solution plotting receipe:","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"using Plots\nplot(sol, lw=2)","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"(Image: models1)","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"To solve for a steady-state starting from the guess u0, one can use","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"using SteadyStateDiffEq\nprob = SteadyStateProblem(rn,u0,p)\nsol = solve(prob, SSRootfind())","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"or","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"prob = SteadyStateProblem(rn,u0,p)\nsol = solve(prob, DynamicSS(Tsit5()))","category":"page"},{"location":"tutorials/models/#Stochastic-simulations-using-SDEs","page":"Model Simulation","title":"Stochastic simulations using SDEs","text":"","category":"section"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"In a similar way an SDE can be created using ","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"using StochasticDiffEq\nsdeprob = SDEProblem(rn, args...; kwargs...)","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"In this case the chemical Langevin equations (as derived in Gillespie, J. Chem. Phys. 2000) will be used to generate stochastic differential equations.","category":"page"},{"location":"tutorials/models/#Stochastic-simulations-using-discrete-stochastic-simulation-algorithms","page":"Model Simulation","title":"Stochastic simulations using discrete stochastic simulation algorithms","text":"","category":"section"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"Instead of solving SDEs one can create a stochastic jump process model using integer copy numbers and a discrete stochastic simulation algorithm (i.e. Gillespie Method or Kinetic Monte Carlo). This can be done using:","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"using DiffEqJump\nrn = @reaction_network begin\n  p, ∅ → X\n  d, X → ∅\nend p d\np = [1.0,2.0]\nu0 = [10]\ntspan = (0.,1.)\ndiscrete_prob = DiscreteProblem(rn, u0, tspan, p)\njump_prob = JumpProblem(rn, discrete_prob, Direct())\nsol = solve(jump_prob, SSAStepper())","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"Here we used Gillespie's Direct method as the underlying stochastic simulation algorithm. We get","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"plot(sol, lw=2)","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"(Image: models2)","category":"page"},{"location":"tutorials/models/#Reaction-rate-laws-used-in-simulations","page":"Model Simulation","title":"Reaction rate laws used in simulations","text":"","category":"section"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"In generating mathematical models from a ReactionSystem, reaction rates are treated as microscopic rates. That is, for a general mass action reaction of the form n_1 S_1 + n_2 S_2 + dots n_M S_M to dots with stoichiometric substrate coefficients n_i_i=1^M and rate constant k, the corresponding ODE rate law is taken to be","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"k prod_i=1^M frac(S_i)^n_in_i","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"while the jump process transition rate (i.e. propensity function) is","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"k prod_i=1^M fracS_i (S_i-1) dots (S_i-n_i+1)n_i","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"For example, the ODE model of the reaction 2X + 3Y to Z with rate constant k would be","category":"page"},{"location":"tutorials/models/","page":"Model Simulation","title":"Model Simulation","text":"fracdXdt =  -2 k fracX^22 fracY^33 = -k fracX^2 Y^33 \nfracdYdt =  -3 k fracX^22 fracY^33 = -k fracX^2 Y^34 \nfracdZdt = k fracX^22 fracY^33","category":"page"},{"location":"tutorials/using_catalyst/#Using-Catalyst","page":"Using Catalyst","title":"Using Catalyst","text":"","category":"section"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"In this tutorial we'll provide an introduction to using Catalyst to specify chemical reaction networks, and then to solve ODE, jump and SDE models generated from them. Let's start by using the Catalyst @reaction_network macro to specify a simply chemical reaction network; the well-known repressilator.","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We first import the basic packages we'll need:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"# If not already installed, first hit \"]\" within a Julia REPL. Then type:\n# add Catalyst DifferentialEquations Plots Latexify \n\nusing Catalyst, DifferentialEquations, Plots, Latexify","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We now construct the reaction network. The basic types of arrows and predefined rate laws one can use are discussed in detail within the next tutorial, The Reaction DSL. Here we use a mix of first order, zero order and repressive Hill function rate laws. Note, varnothing corresponds to the empty state, and is used for zeroth order production and first order degradation reactions:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"repressilator = @reaction_network begin\n    hillr(P₃,α,K,n), ∅ --> m₁\n    hillr(P₁,α,K,n), ∅ --> m₂\n    hillr(P₂,α,K,n), ∅ --> m₃\n    (δ,γ), m₁ ↔ ∅\n    (δ,γ), m₂ ↔ ∅\n    (δ,γ), m₃ ↔ ∅\n    β, m₁ --> m₁ + P₁\n    β, m₂ --> m₂ + P₂\n    β, m₃ --> m₃ + P₃\n    μ, P₁ --> ∅\n    μ, P₂ --> ∅\n    μ, P₃ --> ∅\nend α K n δ γ β μ;","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"@reaction_network returns a ModelingToolkit.ReactionSystem which can be converted to a variety of other mathematical models represented as ModelingToolkit.AbstractSystems.","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We can use Latexify to look at the corresponding reactions and understand the generated rates expressions for each reaction","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"latexify(repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"beginalign*\nrequiremhchem\nce varnothing -fracalpha K^nK^n + left( mathrmP_3left( t right) right)^n m_1\nce varnothing -fracalpha K^nK^n + left( mathrmP_1left( t right) right)^n m_2\nce varnothing -fracalpha K^nK^n + left( mathrmP_2left( t right) right)^n m_3\nce m_1 =deltagamma varnothing\nce m_2 =deltagamma varnothing\nce m_3 =deltagamma varnothing\nce m_1 -beta m_1 + P_1\nce m_2 -beta m_2 + P_2\nce m_3 -beta m_3 + P_3\nce P_1 -mu varnothing\nce P_2 -mu varnothing\nce P_3 -mu varnothing\nendalign*","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Assuming Graphviz is installed, within a Jupyter notebook we can also graph the reaction network by","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"g = Graph(repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"giving","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"(Image: Repressilator solution)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"The network graph shows a variety of information, representing each species as a blue node, and each reaction as an orange dot. Black arrows from species to reactions indicate reactants, and are labelled with their input stoichiometry. Similarly, black arrows from reactions to species indicate products, and are labelled with their output stoichiometry. In contrast, red arrows from a species to reactions indicate the species is used within the reactions' rate expressions. For the repressilator, the reactions","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"hillr(P₃,α,K,n), ∅ --> m₁\nhillr(P₁,α,K,n), ∅ --> m₂\nhillr(P₂,α,K,n), ∅ --> m₃","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"have rates that depend on the proteins, and hence lead to red arrows from each Pᵢ.","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Note, from the REPL or scripts one can always use savegraph to save the graph (assuming Graphviz is installed).","category":"page"},{"location":"tutorials/using_catalyst/#Mass-Action-ODE-Models","page":"Using Catalyst","title":"Mass Action ODE Models","text":"","category":"section"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Let's now use our ReactionSystem to generate and solve a corresponding mass action ODE model. We first convert the system to a ModelingToolkit.ODESystem by","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"odesys = convert(ODESystem, repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We can once again use Latexify to look at the corresponding ODE model ","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"latexify(odesys)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"beginaligned\nfracdm_1(t)dt = fracalpha K^nK^n + left( mathrmP_3left( t right) right)^n - delta mathrmm_1left( t right) + gamma \nfracdm_2(t)dt = fracalpha K^nK^n + left( mathrmP_1left( t right) right)^n - delta mathrmm_2left( t right) + gamma \nfracdm_3(t)dt = fracalpha K^nK^n + left( mathrmP_2left( t right) right)^n - delta mathrmm_3left( t right) + gamma \nfracdP_1(t)dt = beta mathrmm_1left( t right) - mu mathrmP_1left( t right) \nfracdP_2(t)dt = beta mathrmm_2left( t right) - mu mathrmP_2left( t right) \nfracdP_3(t)dt = beta mathrmm_3left( t right) - mu mathrmP_3left( t right)\nendaligned","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"(Note, there is a Latexify bug currently that causes different fonts to be used for the species symbols on each side of the equations.)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Before we can solve the ODEs, we need to specify the values of the parameters in the model, the initial condition, and the time interval to solve the model on. To do this it helps to know the orderings of the parameters and the species. Parameters are ordered in the same order they appear after the end statement in the @reaction_network macro. Species are ordered in the order they first appear within the @reaction_network macro. We can see these orderings using the speciesmap and paramsmap functions:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"speciesmap(repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Dict{Variable{Number},Int64} with 6 entries:\n  P₂ => 5\n  m₁ => 1\n  m₂ => 2\n  P₁ => 4\n  P₃ => 6\n  m₃ => 3","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"paramsmap(repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Dict{Variable{ModelingToolkit.Parameter{Number}},Int64} with 7 entries:\n  γ => 5\n  β => 6\n  α => 1\n  δ => 4\n  μ => 7\n  n => 3\n  K => 2","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"which are consistent with the API functions: ","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"species(repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"6-element Array{Variable,1}:\n m₁\n m₂\n m₃\n P₁\n P₂\n P₃","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"params(repressilator)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"params(repressilator)\n7-element Array{Variable,1}:\n α\n K\n n\n δ\n γ\n β\n μ","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Knowing these orderings we can create parameter and initial condition vectors, and then setup the ODEProblem we want to solve:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"# parameters [α,K,n,δ,γ,β,μ]\np = (.5, 40, 2, log(2)/120, 5e-3, 20*log(2)/120, log(2)/60)\n\n# initial condition [m₁,m₂,m₃,P₁,P₂,P₃]\nu₀ = [0.,0.,0.,20.,0.,0.]\n\n# time interval to solve on\ntspan = (0., 10000.)\n\n# create the ODEProblem we want to solve\noprob = ODEProblem(repressilator, u₀, tspan, p)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Note, by passing repressilator directly to the ODEProblem ModelingToolkit has to (internally) call convert(ODESystem, repressilator) again. We could instead pass odesys directly, provided we construct mappings from each species to their initial value, and each parameter to their value like:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"u₀map  = Pair.(species(repressilator), u₀)\npmap   = Pair.(params(repressilator), p)\noprob2 = ODEProblem(osys, u₀map, tspan, pmap)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"oprob and oprob2 are functionally equivalent, each representing the same underlying problem. ","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"At this point we are all set to solve the ODEs. We can now use any ODE solver from within the DifferentialEquations.jl package. We'll use the recommended default explicit solver, Tsit5(), and then plot the solutions:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"sol = solve(oprob, Tsit5(), saveat=10.)\nplot(sol)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"(Image: Repressilator ODE Solutions)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We see the well-known oscillatory behavior of the repressilator! For more on choices of ODE solvers, see the DifferentialEquations.jl documentation.","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"","category":"page"},{"location":"tutorials/using_catalyst/#Stochastic-Simulation-Algorithms-(SSAs)-for-Stochastic-Chemical-Kinetics","page":"Using Catalyst","title":"Stochastic Simulation Algorithms (SSAs) for Stochastic Chemical Kinetics","text":"","category":"section"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"Let's now look at a stochastic chemical kinetics model of the repressilator, modeling it with jump processes. Here we will construct a DiffEqJump JumpProblem that uses Gillespie's Direct method, and then solve it to generate one realization of the jump process:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"# redefine the initial condition to be integer valued\nu₀ = [0,0,0,20,0,0]\n\n# next we create a discrete problem to encode that our species are integer valued:\ndprob = DiscreteProblem(repressilator, u₀, tspan, p)\n\n# now we create a JumpProblem, and specify Gillespie's Direct Method as the solver:\njprob = JumpProblem(repressilator, dprob, Direct(), save_positions=(false,false))\n\n# now let's solve and plot the jump process:\nsol = solve(jprob, SSAStepper(), saveat=10.)\nplot(sol)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"(Image: Repressilator SSA Solutions)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We see that oscillations remain, but become much noisier. Note, in constructing the JumpProblem we could have used any of the SSAs that are part of DiffEqJump instead of the Direct method, see the list of SSAs (i.e. constant rate jump aggregators) in the documentation.","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"","category":"page"},{"location":"tutorials/using_catalyst/#Chemical-Langevin-Equation-(CLE)-Stochastic-Differential-Equation-(SDE)-Models","page":"Using Catalyst","title":"Chemical Langevin Equation (CLE) Stochastic Differential Equation (SDE) Models","text":"","category":"section"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"At an intermediate physical scale between macroscopic ODE models and microscopic stochastic chemical kinetics models lies the CLE, given by a system of SDEs that add to each ODE above a noise term. As the repressilator has species that get very close to zero in size, it is not a good candidate to model with the CLE (where solutions can then go negative and become unphysical). Let's create a simpler reaction network for a birth-death process that will stay non-negative:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"bdp = @reaction_network begin\n  c₁, X --> 2X\n  c₂, X --> 0\n  c₃, 0 --> X\nend c₁ c₂ c₃\np = (1.0,2.0,50.)\nu₀ = [5.]\ntspan = (0.,4.);","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"The corresponding Chemical Langevin Equation SDE is then","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"dX(t) = left( c_1 Xleft( t right) - c_2 Xleft( t right) + c_3 right) dt + sqrtc_1 X(t) dW_1(t) - sqrtc_2 X(t) dW_2(t) + sqrtc_3 dW_3(t)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"where each W_i(t) denotes an independent Brownian Motion. We can solve the CLE model by creating an SDEProblem and solving it similar to what we did for ODEs above:","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"# SDEProblem for CLE\nsprob = SDEProblem(bdp, u₀, tspan, p)\n\n# solve and plot, tstops is used to specify enough points\n# that the plot looks well-resolved\nsol = solve(sprob, LambaEM(), tstops=range(0., step=4e-3, length=1001))\nplot(sol)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"(Image: CLE Solution)","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"We again have complete freedom to select any of the StochasticDiffEq.jl SDE solvers, see the documentation. ","category":"page"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"","category":"page"},{"location":"tutorials/using_catalyst/#Notes","page":"Using Catalyst","title":"Notes","text":"","category":"section"},{"location":"tutorials/using_catalyst/","page":"Using Catalyst","title":"Using Catalyst","text":"For each of the preceding models we converted the ReactionSystem to, i.e. ODEs, jumps or SDEs, we had two paths for conversion:\na. Convert to the corresponding ModelingToolkit system and then use it in     creating the corresponding problem.\nb. Directly create the desired problem type from the ReactionSystem.\nThe latter is more convenient, however, the former will be more efficient if one needs to repeatedly create the associated Problem.\nModelingToolkit offers many options for optimizing the generated ODEs and SDEs, including options to build functions for evaluating Jacobians and/or multithreaded versions of derivative evaluation functions. See the options for ODEProblems and SDEProblems.","category":"page"}]
}
